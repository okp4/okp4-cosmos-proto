name: Publish

on:
  push:
    branches: [main]
    tags: ["v*"]

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish-maven:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Configure gradle.properties
        run: |
          cat <<EOF >> kotlin/gradle.properties
          maven.credentials.username=${{ secrets.MAVEN_REPOSITORY_USERNAME }}
          maven.credentials.password=${{ secrets.MAVEN_REPOSITORY_PASSWORD }}
          EOF

      - name: Publish maven snapshot
        if: "!contains(github.ref, 'refs/tags/')"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publish
          build-root-directory: kotlin

      - name: Publish maven release
        if: contains(github.ref, 'refs/tags/')
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publish -Prelease
          build-root-directory: kotlin

  publish-npm-okp4:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.5.0

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://npm.pkg.github.com"
          scope: "@okp4"

      - name: Publish package
        run: |
          set -eu

          DATE=$(date +%Y%m%d%H%M%S)

          yarn --cwd ts && yarn --cwd ts generate && yarn --cwd ts build

          publish=(yarn --cwd ts publish --no-git-tag-version --non-interactive)

          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            publish+=(--tag latest)
          elif [[ $GITHUB_EVENT_NAME == pull_request ]]; then
            publish+=(--prerelease --preid ${{ env.CI_ACTION_REF_NAME_SLUG }}.$DATE --tag ${{ env.CI_ACTION_REF_NAME_SLUG }})
          else
            publish+=(--prerelease --preid next.$DATE --tag next)
          fi

          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}

  publish-npm-public:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.5.0

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://registry.npmjs.org"
          scope: "@okp4"

      - name: Publish package
        run: |
          set -eu

          yarn --cwd ts && yarn --cwd ts generate && yarn --cwd ts build

          publish=(yarn --cwd ts publish --access=public --no-git-tag-version --non-interactive --tag latest)

          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLIC_REGISTRY_TOKEN }}

  publish-pypi:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target:
          - name: cosmos_sdk_grpc_client
            includes: "-I=../../proto/cosmos-sdk $(find ../../proto/cosmos-sdk -type f -name '*.proto' | tr '\n' ' ')"
          - name: okp4_grpc_client
            includes: "-I=../../proto/cosmos-sdk -I=../../proto/okp4 $(find ../../proto -type f -name '*.proto' | tr '\n' ' ')"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.5.0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.1.5
        with:
          poetry-version: 1.1.11

      - name: Publish package
        working-directory: ./python/${{ matrix.target.name }}
        run: |
          poetry install

          mkdir -p ${{ matrix.target.name }}
          poetry run python -m grpc_tools.protoc ${{ matrix.target.includes }} --grpc_python_out=${{ matrix.target.name }}

          poetry build

          echo "ðŸš€ Publishing pypi package '${{ matrix.target.name }}'"
          poetry publish  -u __token__ -p "${{ secrets.PYPI_API_TOKEN }}"
