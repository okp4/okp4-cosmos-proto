name: Publish

on:
  push:
    branches: [main]
    tags: ["v*"]

concurrency:
  group: publish-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: echo "::set-output name=matrix::$(cat proto.json | jq -c .)"

  publish-maven:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Configure gradle.properties
        run: |
          cat <<EOF >> kotlin/gradle.properties
          maven.credentials.username=${{ secrets.MAVEN_REPOSITORY_USERNAME }}
          maven.credentials.password=${{ secrets.MAVEN_REPOSITORY_PASSWORD }}
          EOF

      - name: Publish maven snapshot
        if: "!contains(github.ref, 'refs/tags/')"
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publish
          build-root-directory: kotlin

      - name: Publish maven release
        if: contains(github.ref, 'refs/tags/')
        uses: gradle/gradle-build-action@v2
        with:
          arguments: publish -Prelease
          build-root-directory: kotlin

  publish-npm-okp4:
    runs-on: ubuntu-22.04
    needs: matrix
    strategy: 
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - name: Configure buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Generate proto
        run: |
          buf generate --template buf.gen.ts.yaml ${{ matrix.proto.buf }} -o ${{ matrix.proto.directory.ts }}

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://npm.pkg.github.com"
          scope: "@okp4"

      - name: Publish package
        run: |
          set -eu

          DATE=$(date +%Y%m%d%H%M%S)

          yarn --cwd ${{ matrix.proto.directory.ts }} && yarn --cwd ${{ matrix.proto.directory.ts }} build

          publish=(yarn --cwd ${{ matrix.proto.directory.ts }} publish --no-git-tag-version --non-interactive)

          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            publish+=(--tag latest)
          elif [[ $GITHUB_EVENT_NAME == pull_request ]]; then
            publish+=(--prerelease --preid ${{ env.CI_ACTION_REF_NAME_SLUG }}.$DATE --tag ${{ env.CI_ACTION_REF_NAME_SLUG }})
          else
            publish+=(--prerelease --preid next.$DATE --tag next)
          fi

          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_TOKEN }}

  publish-npm-public:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs: matrix
    strategy: 
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - name: Configure buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Generate proto
        run: |
          buf generate --template buf.gen.ts.yaml ${{ matrix.proto.buf }} -o ${{ matrix.proto.directory.ts }}

      - name: Setup node environment (for publishing)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0
          registry-url: "https://registry.npmjs.org"
          scope: "@okp4"

      - name: Publish package
        run: |
          set -eu

          yarn --cwd ${{ matrix.proto.directory.ts }} && yarn --cwd ${{ matrix.proto.directory.ts }} build

          publish=(yarn --cwd ${{ matrix.proto.directory.ts }} publish --access=public --no-git-tag-version --non-interactive --tag latest)

          echo "ðŸš€ Publishing npm package with following command line: ${publish[@]}"
          "${publish[@]}"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLIC_REGISTRY_TOKEN }}

  publish-crates:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          override: true

      - name: Install cargo make
        uses: davidB/rust-cargo-make@v1

      - name: Publish packages
        working-directory: ./rust
        run: |
          echo "ðŸš€ Publishing cargo package"
          cargo make --env CARGO_API_TOKEN="${{ secrets.CARGO_API_TOKEN }}" -- publish

  publish-pypi:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    needs: matrix
    strategy: 
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up context
        id: project_context
        uses: FranzDiebold/github-env-vars-action@v2.7.0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: 1.4.1
      
      - name: Configure buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
  
      - name: Generate proto
        run: |
          buf generate --template buf.gen.python.yaml ${{ matrix.proto.buf }} -o ${{ matrix.proto.directory.python }}

      - name: Publish package
        working-directory: ./${{ matrix.proto.directory.python }}/../
        run: |
          poetry install
          poetry build

          echo "ðŸš€ Publishing pypi package '${{ matrix.proto.directory.python }}'"
          poetry publish  -u __token__ -p "${{ secrets.PYPI_API_TOKEN }}"
